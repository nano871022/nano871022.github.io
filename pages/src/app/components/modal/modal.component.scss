.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000; // Ensure it's on top
  cursor: pointer; // Indicates the overlay can be clicked to close
}

.modal-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  position: relative;
  cursor: default; // Reset cursor for the content area
  height: 80vh; /* Adjust as needed */
  max-width: 99%; /* Optional: max width */
  max-height: 800px;  /* Optional: max height */
  display: flex;
  flex-direction: column;
  // overflow: hidden; // .modal-content itself doesn't need to clip, .zoom-image-container will.
}

// This is the div that wraps lib-ngx-image-zoom and acts as the viewport.
.zoom-image-container {
  flex-grow: 1;
  position: relative;
  overflow: hidden; // Crucial: This clips the panned/zoomed image.
  background-color: white; // Solid background for transparency and preventing see-through.
  display: flex;
  justify-content: center;
  align-items: center;

  // The lib-ngx-image-zoom element will be a direct child.
  // It's styled via [style.width.%]="100" and [style.height.%]="100" in HTML.
  // Its own internal imgStyle is also set in HTML.
}

/*
  Styling for ngx-image-zoom's internal structure.
  The `containerClass` on `<lib-ngx-image-zoom>` is "ngx-zoom-lib-internal-container".
  This class is applied to the div *inside* lib-ngx-image-zoom that holds thumb/full images.
*/
:host ::ng-deep .ngx-zoom-lib-internal-container {
  width: 100% !important;
  height: 100% !important;
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
  position: relative; // Good for stacking context if library uses absolute for full image.

  > img {
    // This is the thumbnail image.
    // In "toggle" mode, ngx-image-zoom should manage its visibility.
    // If the thumb still ghosts under the zoomed image, this would be a place to add:
    // opacity: 0; or display: none; (potentially based on a class indicating zoom is active)
    // For now, assume library handles it.
  }

  .ngxImageZoomFullContainer {
    // This is the container for the full-resolution *zoomed* image.
    // It should be opaque if the main image has transparency, to prevent the *thumbnail* from showing through.
    // If .zoom-image-container has a white background, this might only be needed if this container
    // is not 100% width/height or if the thumbnail is somehow still visible behind it.
    // Most zoom libraries make this container cover the thumb.
    // background-color: white; // Add this if the thumbnail is ghosting through transparent zoomed image.
                               // Test carefully, as it might cover desired transparency relative to .zoom-image-container's bg.
  }
}

// Remove or comment out obsolete selectors for clarity
/*
:host ::ng-deep .ngx-zoom-container { ... }
:host ::ng-deep .ngx-zoom-container > lib-ngx-image-zoom { ... }
:host ::ng-deep .ngx-zoom-container .ngxImageZoomContainer > img { ... }
:host ::ng-deep .ngxImageZoomFullContainer > img { ... }
*/

.zoom-controls {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 5px 0 10px; // Add some spacing around controls
  gap: 10px; // Space between buttons
  position: relative; // For z-index if ever needed over the image, though unlikely here
  z-index: 1010; // Ensure controls are above the image if there's any overlap potential
}

.zoom-button {
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  padding: 5px 10px;
  font-size: 1rem;
  cursor: pointer;
  border-radius: 4px;
  line-height: 1;
}

.zoom-button:hover {
  background-color: #e0e0e0;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 15px;
  background: none;
  border: none;
  font-size: 2rem;
  color: #333;
  cursor: pointer;
  line-height: 1;
  padding: 0;
  z-index: 1010; // Above the zoom content
}

.close-button:hover {
  color: #000;
}

/* Styling for the ngx-image-zoom component within the modal */
:host ::ng-deep .ngx-zoom-container { /* Using :host ::ng-deep for component style encapsulation */
  width: 100%;
  height: calc(100% - 30px); /* Adjust if close button takes space or if padding is an issue */
  display: flex;
  justify-content: center;
  align-items: center;
}

:host ::ng-deep .ngx-zoom-container > lib-ngx-image-zoom {
  width: 100% !important; /* Ensure it fills the container */
  height: 100% !important;
}

:host ::ng-deep .ngx-zoom-container .ngxImageZoomContainer > img {
  object-fit: contain !important; /* Ensure the thumb image respects aspect ratio */
  width: 100% !important;
  height: 100% !important;
}

:host ::ng-deep .ngxImageZoomFullContainer > img {
  object-fit: contain !important; /* Ensure the zoomed image respects aspect ratio */
  /* Let the library handle width/height for the zoomed image based on magnification */
}
